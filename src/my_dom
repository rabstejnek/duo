#!/usr/bin/env python3

import sys


'''
Command object for dom algorithm.
'''
class DomCommand:
    
    '''
    Initializes dom command object.
    '''
    def __init__(self):
        self.sample_size = 100

    '''
    Executes dom algorithm on given table.
    '''
    def execute(self,table):
        # TODO
        return table

'''
Factory for creating our Command objects.
'''
class CommandFactory:
    
    '''
    Creates Command based on a type string.
    '''
    def createCommand(self,type):
        if type == "dom":
            return DomCommand()
        else:
            return None

'''
A weighted column to be used in dom calculation.
'''
class DependentColumn:
    
    def __init__(self,label,weight):
        self.label = label
        self.weight = weight

'''
An unweighted column not to be used in dom calculation.
'''
class IndependentColumn:
    
    def __init__(self,label):
        self.label = label
        self.weight = 0

'''
Factory that creates column objects.
'''
class ColumnFactory:
    
    '''
    Creates columns based on name.
    '''
    def createColumn(self,label):
        if label.startswith(">"):
            return DependentColumn(label,1)
        elif label.startswith("<"):
            return DependentColumn(label,-1)
        else:
            return IndependentColumn(label)

'''
Table that holds columns and rows.
'''
class Table:
    
    def __init__(self):
        self.columns = list()
        self.rows = list()
        
    def addColumns(self,labels):
        columnFactory = ColumnFactory()
        for label in labels:
            self.columns.append(columnFactory.createColumn(label))
            
    def addRow(self,row):
        self.rows.append(row)
        
    def readCSV(self,input):
        # First read in column labels.
        self.addColumns(input.readline().rstrip().split(","))
        # Then read in rows
        for line in input:
            self.addRow(line.rstrip().split(","))
        
    
        
'''
Prints a table in CSV format.
'''
def printCSV(table):
    # print out table in csv format
    print("")




if __name__ == "__main__":
    
    # Reads csv from stdin into table.
    table = Table()
    table.readCSV(sys.stdin)
    
    # Create a dom command and execute it on the table.
    commandFactory = CommandFactory()
    dom = commandFactory.createCommand("dom")
    domTable = dom.execute(table)
    
    # Sends the new table to stdout.
    printCSV(domTable)
    
    
    
    
    
    